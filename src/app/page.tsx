'use client';

import { useState } from 'react';

export default function Home() {
  const [prompt, setPrompt] = useState('');
  const [language, setLanguage] = useState('typescript');
  const [generatedCode, setGeneratedCode] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [showChat, setShowChat] = useState(false);
  const [reviewScore, setReviewScore] = useState(0);
  const [executionTime, setExecutionTime] = useState(0);

  const handleGenerate = async () => {
    if (!prompt.trim()) return;
    
    setIsGenerating(true);
    setGeneratedCode('');
    
    try {
      // Simulate API call to our Mastra agent
      // In production, this would call: fetch('/api/generate', { method: 'POST', body: JSON.stringify({ prompt, language }) })
      
      await new Promise(resolve => setTimeout(resolve, 2500));
      
      // Simulated response
      const mockCode = `// ${language.toUpperCase()} - Generated by NeuroCoder AI
// Task: ${prompt}

${language === 'python' ? `def main():
    """
    ${prompt}
    """
    print("Hello from NeuroCoder AI!")
    return True

if __name__ == "__main__":
    main()` : 
language === 'typescript' ? `interface Config {
  name: string;
  version: string;
}

// ${prompt}
async function main(): Promise<boolean> {
  console.log("Hello from NeuroCoder AI!");
  return true;
}

main();` :
language === 'rust' ? `// ${prompt}
fn main() {
    println!("Hello from NeuroCoder AI!");
}` :
`// ${prompt}
function main() {
  console.log("Hello from NeuroCoder AI!");
  return true;
}

main();`}`;

      setGeneratedCode(mockCode);
      setReviewScore(Math.floor(Math.random() * 10) + 90);
      setExecutionTime(2.3 + Math.random() * 0.5);
      
    } catch (error) {
      console.error('Generation error:', error);
      setGeneratedCode('// Error generating code. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedCode);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 relative overflow-hidden">
      {/* Animated Background Orbs */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-purple-500 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-pulse"></div>
        <div className="absolute top-1/3 right-1/4 w-96 h-96 bg-blue-500 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-pulse" style={{ animationDelay: '1s' }}></div>
        <div className="absolute bottom-1/4 left-1/3 w-96 h-96 bg-pink-500 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-pulse" style={{ animationDelay: '2s' }}></div>
      </div>

      {/* Header */}
      <header className="relative z-10 border-b border-white/10 bg-black/20 backdrop-blur-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-to-br from-purple-600 to-blue-500 rounded-lg flex items-center justify-center shadow-lg shadow-purple-500/50">
                <span className="text-2xl">üß†</span>
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
                  NeuroCoder AI
                </h1>
                <p className="text-xs text-gray-400">Powered by Decentralized AI</p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <a 
                href="https://github.com/kikiprojecto/agent-challenge" 
                target="_blank"
                rel="noopener noreferrer"
                className="px-4 py-2 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg text-white text-sm transition-all duration-300 hover:scale-105"
              >
                ‚≠ê GitHub
              </a>
              <div className="flex items-center space-x-2 px-3 py-2 bg-green-500/10 border border-green-500/20 rounded-lg">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                <span className="text-green-400 text-xs">Nosana Ready</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {!showChat ? (
          /* HERO SECTION */
          <div className="text-center space-y-12 py-20">
            <div className="space-y-6 animate-fade-in">
              <div className="inline-block px-4 py-2 bg-purple-500/10 border border-purple-500/20 rounded-full text-purple-300 text-sm mb-4">
                üèÜ Nosana Agents 102 Challenge
              </div>
              <h2 className="text-6xl md:text-7xl font-bold text-white">
                Build Smarter with
                <span className="block mt-2 bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent animate-gradient">
                  AI-Powered Coding
                </span>
              </h2>
              <p className="text-xl md:text-2xl text-gray-300 max-w-3xl mx-auto leading-relaxed">
                Generate, review, test, and deploy production-ready code using <span className="text-purple-400 font-semibold">self-improving AI agents</span> on decentralized infrastructure
              </p>
            </div>

            {/* Feature Cards */}
            <div className="grid md:grid-cols-3 gap-6 mt-16 px-4">
              {[
                { icon: 'ü§ñ', title: 'AI Code Generation', desc: 'Natural language to production code in 6 languages', color: 'purple' },
                { icon: 'üîí', title: 'Security Review', desc: 'Automated vulnerability detection and fixes', color: 'blue' },
                { icon: '‚ö°', title: 'Real-time Execution', desc: 'Test code in secure sandbox instantly', color: 'pink' }
              ].map((feature, i) => (
                <div 
                  key={i} 
                  className={`group relative p-8 bg-white/5 backdrop-blur-lg border border-white/10 rounded-2xl transition-all duration-500 hover:bg-white/10 hover:border-${feature.color}-500/50 hover:scale-105 hover:shadow-2xl hover:shadow-${feature.color}-500/20 cursor-pointer`}
                >
                  <div className="text-6xl mb-4 group-hover:scale-110 transition-transform duration-500">{feature.icon}</div>
                  <h3 className="text-xl font-bold text-white mb-3">{feature.title}</h3>
                  <p className="text-gray-400 leading-relaxed">{feature.desc}</p>
                  <div className={`absolute inset-0 bg-gradient-to-br from-${feature.color}-500/0 to-${feature.color}-500/10 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500`}></div>
                </div>
              ))}
            </div>

            {/* CTA Button */}
            <button
              onClick={() => setShowChat(true)}
              className="group mt-16 px-10 py-5 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-500 hover:to-blue-500 text-white text-xl font-bold rounded-2xl shadow-2xl shadow-purple-500/50 hover:shadow-purple-500/80 transition-all duration-300 hover:scale-110 transform relative overflow-hidden"
            >
              <span className="relative z-10 flex items-center space-x-2">
                <span>Start Coding Now</span>
                <span className="group-hover:translate-x-1 transition-transform duration-300">‚Üí</span>
              </span>
              <div className="absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            </button>

            {/* Stats */}
            <div className="flex flex-wrap justify-center gap-8 mt-20">
              {[
                { value: '6', label: 'AI Tools', icon: 'üõ†Ô∏è' },
                { value: '24', label: 'Code Patterns', icon: 'üìö' },
                { value: '7', label: 'Workflow Steps', icon: 'üîÑ' },
                { value: '100%', label: 'Decentralized', icon: 'üåê' }
              ].map((stat, i) => (
                <div key={i} className="text-center px-6 py-4 bg-white/5 backdrop-blur-lg border border-white/10 rounded-xl hover:bg-white/10 transition-all duration-300">
                  <div className="text-2xl mb-1">{stat.icon}</div>
                  <div className="text-4xl font-bold text-white mb-1">{stat.value}</div>
                  <div className="text-sm text-gray-400">{stat.label}</div>
                </div>
              ))}
            </div>
          </div>
        ) : (
          /* CHAT INTERFACE */
          <div className="space-y-6 animate-fade-in">
            <button
              onClick={() => setShowChat(false)}
              className="text-gray-400 hover:text-white transition-colors flex items-center space-x-2 group"
            >
              <span className="group-hover:-translate-x-1 transition-transform duration-300">‚Üê</span>
              <span>Back to Home</span>
            </button>

            <div className="grid lg:grid-cols-2 gap-6">
              {/* INPUT PANEL */}
              <div className="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 space-y-5 hover:border-purple-500/30 transition-all duration-300">
                <div className="flex items-center space-x-2 mb-4">
                  <span className="text-2xl">üí¨</span>
                  <h3 className="text-2xl font-bold text-white">Describe Your Code</h3>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Programming Language</label>
                  <select
                    value={language}
                    onChange={(e) => setLanguage(e.target.value)}
                    className="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white focus:outline-none focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 transition-all cursor-pointer"
                  >
                    <option value="python">üêç Python</option>
                    <option value="javascript">üìú JavaScript</option>
                    <option value="typescript">üî∑ TypeScript</option>
                    <option value="rust">ü¶Ä Rust</option>
                    <option value="solidity">üíé Solidity</option>
                    <option value="go">üêπ Go</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">What do you want to build?</label>
                  <textarea
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    placeholder="Example: Create a REST API with JWT authentication and PostgreSQL database"
                    className="w-full h-56 px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 transition-all resize-none"
                  />
                  <div className="text-xs text-gray-400 mt-2">{prompt.length} characters</div>
                </div>

                <button
                  onClick={handleGenerate}
                  disabled={isGenerating || !prompt.trim()}
                  className="w-full px-6 py-4 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-500 hover:to-blue-500 disabled:from-gray-700 disabled:to-gray-800 text-white font-bold rounded-xl shadow-lg hover:shadow-purple-500/50 transition-all duration-300 hover:scale-[1.02] disabled:cursor-not-allowed disabled:hover:scale-100 disabled:opacity-50 relative overflow-hidden group"
                >
                  {isGenerating ? (
                    <span className="flex items-center justify-center space-x-3">
                      <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      <span>AI is thinking...</span>
                    </span>
                  ) : (
                    <span className="flex items-center justify-center space-x-2">
                      <span>‚ú®</span>
                      <span>Generate Production Code</span>
                    </span>
                  )}
                </button>
              </div>

              {/* OUTPUT PANEL */}
              <div className="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 space-y-5">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <span className="text-2xl">üíª</span>
                    <h3 className="text-2xl font-bold text-white">Generated Code</h3>
                  </div>
                  {generatedCode && (
                    <button
                      onClick={copyToClipboard}
                      className="px-4 py-2 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg text-sm text-white transition-all duration-300 hover:scale-105"
                    >
                      üìã Copy
                    </button>
                  )}
                </div>

                <div className="bg-black/60 border border-white/5 rounded-xl p-5 min-h-[400px] max-h-[500px] font-mono text-sm overflow-auto custom-scrollbar">
                  {generatedCode ? (
                    <pre className="text-green-400 whitespace-pre-wrap">{generatedCode}</pre>
                  ) : (
                    <div className="flex items-center justify-center h-full text-gray-500">
                      {isGenerating ? (
                        <div className="text-center space-y-4">
                          <div className="text-6xl animate-bounce">üß†</div>
                          <div className="text-lg">NeuroCoder AI is analyzing...</div>
                          <div className="flex space-x-1 justify-center">
                            {[0, 1, 2].map(i => (
                              <div key={i} className="w-2 h-2 bg-purple-500 rounded-full animate-pulse" style={{ animationDelay: `${i * 0.2}s` }}></div>
                            ))}
                          </div>
                        </div>
                      ) : (
                        <div className="text-center space-y-2">
                          <div className="text-4xl mb-2">üëà</div>
                          <div>Your generated code will appear here</div>
                          <div className="text-xs">Powered by 6 specialized AI tools</div>
                        </div>
                      )}
                    </div>
                  )}
                </div>

                {generatedCode && (
                  <div className="grid grid-cols-3 gap-3">
                    <div className="bg-gradient-to-br from-green-500/10 to-green-500/5 border border-green-500/20 rounded-xl p-4 text-center hover:scale-105 transition-transform duration-300">
                      <div className="text-3xl font-bold text-green-400">{reviewScore}</div>
                      <div className="text-xs text-gray-400 mt-1">Quality Score</div>
                    </div>
                    <div className="bg-gradient-to-br from-blue-500/10 to-blue-500/5 border border-blue-500/20 rounded-xl p-4 text-center hover:scale-105 transition-transform duration-300">
                      <div className="text-3xl font-bold text-blue-400">{executionTime.toFixed(1)}s</div>
                      <div className="text-xs text-gray-400 mt-1">Generation Time</div>
                    </div>
                    <div className="bg-gradient-to-br from-purple-500/10 to-purple-500/5 border border-purple-500/20 rounded-xl p-4 text-center hover:scale-105 transition-transform duration-300">
                      <div className="text-2xl font-bold text-purple-400">Medium</div>
                      <div className="text-xs text-gray-400 mt-1">Complexity</div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="relative z-10 border-t border-white/10 bg-black/20 backdrop-blur-lg mt-auto">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex flex-col md:flex-row items-center justify-between gap-4 text-sm text-gray-400">
            <div className="flex items-center space-x-2">
              <span>Built for</span>
              <span className="text-purple-400 font-semibold">Nosana Agents 102 Challenge 2025</span>
            </div>
            <div className="flex items-center space-x-3">
              <span className="text-gray-500">Powered by</span>
              <span className="font-semibold text-white">Mastra</span>
              <span className="text-gray-500">+</span>
              <span className="font-semibold text-white">Decentralized AI</span>
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse ml-2"></div>
            </div>
          </div>
        </div>
      </footer>

      <style jsx global>{`
        @keyframes gradient {
          0%, 100% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
        }
        .animate-gradient {
          background-size: 200% 200%;
          animation: gradient 3s ease infinite;
        }
        .custom-scrollbar::-webkit-scrollbar {
          width: 8px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
          background: rgba(255, 255, 255, 0.05);
          border-radius: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
          background: rgba(168, 85, 247, 0.4);
          border-radius: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
          background: rgba(168, 85, 247, 0.6);
        }
      `}</style>
    </div>
  );
}
