'use client';

import { useState } from 'react';

type Language = 'python' | 'javascript' | 'typescript' | 'rust' | 'solidity' | 'go';

export default function NeuroCoderPage() {
  const [prompt, setPrompt] = useState('');
  const [language, setLanguage] = useState<Language>('typescript');
  const [generatedCode, setGeneratedCode] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [metrics, setMetrics] = useState({ score: 0, time: 0, complexity: 'simple' });
  const [showChat, setShowChat] = useState(false);

  const handleGenerate = async () => {
    setIsGenerating(true);
    try {
      // Simulate code generation
      setTimeout(() => {
        setGeneratedCode(`// Code generated by NeuroCoder AI
// Language: ${language}
// Prompt: ${prompt}

${language === 'typescript' ? 'function example(): string {' : 
  language === 'python' ? 'def example():' :
  language === 'rust' ? 'fn example() -> String {' :
  language === 'solidity' ? 'function example() public pure returns (string memory) {' :
  language === 'go' ? 'func example() string {' :
  'function example() {'}
  // Your generated code will appear here
  // Connected to Mastra NeuroCoder agent
  return "Hello from NeuroCoder AI!";
${language === 'python' ? '' : '}'}

// This is a demo. The actual agent will generate production-ready code.`);
        
        setMetrics({
          score: Math.floor(Math.random() * 15) + 85,
          time: Math.floor(Math.random() * 2000) + 500,
          complexity: ['simple', 'moderate', 'complex'][Math.floor(Math.random() * 3)]
        });
        setIsGenerating(false);
      }, 2000);
    } catch (error) {
      console.error(error);
      setIsGenerating(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-950 text-white">
      {/* HEADER */}
      <header className="fixed top-0 left-0 right-0 z-50 bg-gray-950/80 backdrop-blur-lg border-b border-white/10">
        <div className="container mx-auto px-6 py-4 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-br from-purple-600 to-blue-500 rounded-lg flex items-center justify-center">
              <span className="text-2xl">🧠</span>
            </div>
            <div>
              <h1 className="text-xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
                NeuroCoder AI
              </h1>
              <p className="text-xs text-gray-400">Powered by Nosana</p>
            </div>
          </div>
          <a 
            href="https://github.com/kikiprojecto/agent-challenge" 
            target="_blank"
            rel="noopener noreferrer"
            className="flex items-center gap-2 px-4 py-2 bg-white/5 hover:bg-white/10 rounded-lg transition-all duration-300 border border-white/10"
          >
            <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
            <span className="text-sm">GitHub</span>
          </a>
        </div>
      </header>

      {/* HERO SECTION */}
      <section className="pt-32 pb-20 px-6">
        <div className="container mx-auto max-w-6xl">
          <div className="text-center mb-16">
            <h2 className="text-6xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-purple-400 via-blue-400 to-purple-400 bg-clip-text text-transparent animate-gradient">
              AI-Powered Code Generation
            </h2>
            <p className="text-xl text-gray-400 mb-8 max-w-2xl mx-auto">
              Generate, review, and optimize production-ready code with advanced AI. 
              Built on decentralized infrastructure.
            </p>
            <button
              onClick={() => setShowChat(true)}
              className="px-8 py-4 bg-gradient-to-r from-purple-600 to-blue-500 rounded-xl font-semibold text-lg hover:scale-105 transition-all duration-300 shadow-2xl shadow-purple-500/20"
            >
              Start Coding →
            </button>
          </div>

          {/* FEATURE CARDS */}
          <div className="grid md:grid-cols-3 gap-6 mb-20">
            <div className="bg-white/5 backdrop-blur-lg border border-white/10 rounded-2xl p-6 hover:bg-white/10 transition-all duration-300 hover:scale-105">
              <div className="w-12 h-12 bg-gradient-to-br from-purple-600 to-purple-400 rounded-lg flex items-center justify-center mb-4">
                <span className="text-2xl">🤖</span>
              </div>
              <h3 className="text-xl font-bold mb-2">AI Code Generation</h3>
              <p className="text-gray-400">
                Generate production-ready code in 6 languages with context-aware AI
              </p>
            </div>

            <div className="bg-white/5 backdrop-blur-lg border border-white/10 rounded-2xl p-6 hover:bg-white/10 transition-all duration-300 hover:scale-105">
              <div className="w-12 h-12 bg-gradient-to-br from-blue-600 to-blue-400 rounded-lg flex items-center justify-center mb-4">
                <span className="text-2xl">🔒</span>
              </div>
              <h3 className="text-xl font-bold mb-2">Security Review</h3>
              <p className="text-gray-400">
                Automated security, performance, and style analysis with scoring
              </p>
            </div>

            <div className="bg-white/5 backdrop-blur-lg border border-white/10 rounded-2xl p-6 hover:bg-white/10 transition-all duration-300 hover:scale-105">
              <div className="w-12 h-12 bg-gradient-to-br from-green-600 to-green-400 rounded-lg flex items-center justify-center mb-4">
                <span className="text-2xl">⚡</span>
              </div>
              <h3 className="text-xl font-bold mb-2">Real-time Execution</h3>
              <p className="text-gray-400">
                Test and validate your code instantly with sandboxed execution
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* MAIN CHAT INTERFACE */}
      <section className="px-6 pb-20">
        <div className="container mx-auto max-w-7xl">
          <div className="bg-white/5 backdrop-blur-lg border border-white/10 rounded-3xl overflow-hidden shadow-2xl">
            <div className="grid lg:grid-cols-2 gap-0">
              {/* INPUT PANEL */}
              <div className="p-8 border-r border-white/10">
                <h3 className="text-2xl font-bold mb-6 flex items-center gap-2">
                  <span className="text-purple-400">⚡</span>
                  Input Panel
                </h3>

                {/* Language Selector */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-400 mb-3">
                    Select Language
                  </label>
                  <div className="grid grid-cols-3 gap-2">
                    {(['python', 'javascript', 'typescript', 'rust', 'solidity', 'go'] as Language[]).map((lang) => (
                      <button
                        key={lang}
                        onClick={() => setLanguage(lang)}
                        className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                          language === lang
                            ? 'bg-gradient-to-r from-purple-600 to-blue-500 text-white shadow-lg'
                            : 'bg-white/5 text-gray-400 hover:bg-white/10'
                        }`}
                      >
                        {lang}
                      </button>
                    ))}
                  </div>
                </div>

                {/* Prompt Input */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-400 mb-3">
                    Describe what you want to build
                  </label>
                  <textarea
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    placeholder="e.g., Create a REST API endpoint for user authentication with JWT..."
                    className="w-full h-40 px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-all duration-300 resize-none"
                  />
                </div>

                {/* Generate Button */}
                <button
                  onClick={handleGenerate}
                  disabled={!prompt || isGenerating}
                  className={`w-full py-4 rounded-xl font-semibold text-lg transition-all duration-300 ${
                    !prompt || isGenerating
                      ? 'bg-gray-700 text-gray-500 cursor-not-allowed'
                      : 'bg-gradient-to-r from-purple-600 to-blue-500 hover:scale-105 shadow-2xl shadow-purple-500/20'
                  }`}
                >
                  {isGenerating ? (
                    <span className="flex items-center justify-center gap-2">
                      <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                      </svg>
                      Generating...
                    </span>
                  ) : (
                    'Generate Code'
                  )}
                </button>

                {/* Metrics Display */}
                {generatedCode && (
                  <div className="mt-6 grid grid-cols-3 gap-4">
                    <div className="bg-white/5 rounded-lg p-4 text-center border border-white/10">
                      <div className="text-2xl font-bold text-green-400">{metrics.score}</div>
                      <div className="text-xs text-gray-400 mt-1">Quality Score</div>
                    </div>
                    <div className="bg-white/5 rounded-lg p-4 text-center border border-white/10">
                      <div className="text-2xl font-bold text-blue-400">{metrics.time}ms</div>
                      <div className="text-xs text-gray-400 mt-1">Generation Time</div>
                    </div>
                    <div className="bg-white/5 rounded-lg p-4 text-center border border-white/10">
                      <div className="text-2xl font-bold text-purple-400 capitalize">{metrics.complexity}</div>
                      <div className="text-xs text-gray-400 mt-1">Complexity</div>
                    </div>
                  </div>
                )}
              </div>

              {/* OUTPUT PANEL */}
              <div className="p-8 bg-gray-900/50">
                <h3 className="text-2xl font-bold mb-6 flex items-center gap-2">
                  <span className="text-blue-400">💻</span>
                  Output / Preview
                </h3>

                {/* Code Preview */}
                <div className="bg-gray-950 rounded-xl border border-white/10 overflow-hidden">
                  <div className="flex items-center justify-between px-4 py-2 bg-white/5 border-b border-white/10">
                    <span className="text-sm text-gray-400">Generated Code</span>
                    <div className="flex items-center gap-2">
                      <span className="text-xs px-2 py-1 bg-purple-500/20 text-purple-400 rounded">
                        {language}
                      </span>
                      {generatedCode && (
                        <button
                          onClick={() => navigator.clipboard.writeText(generatedCode)}
                          className="text-xs px-2 py-1 bg-white/5 hover:bg-white/10 rounded transition-all"
                        >
                          Copy
                        </button>
                      )}
                    </div>
                  </div>
                  <div className="p-4 h-96 overflow-auto">
                    {isGenerating ? (
                      <div className="flex items-center justify-center h-full">
                        <div className="text-center">
                          <svg className="animate-spin h-12 w-12 mx-auto mb-4 text-purple-500" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                          </svg>
                          <p className="text-gray-400">Generating your code...</p>
                        </div>
                      </div>
                    ) : generatedCode ? (
                      <pre className="text-sm text-gray-300 font-mono leading-relaxed">
                        <code>{generatedCode}</code>
                      </pre>
                    ) : (
                      <div className="flex items-center justify-center h-full text-gray-500">
                        <div className="text-center">
                          <div className="text-6xl mb-4">📝</div>
                          <p>Your generated code will appear here</p>
                          <p className="text-sm mt-2">Enter a prompt and click Generate Code</p>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* FOOTER */}
      <footer className="border-t border-white/10 py-8">
        <div className="container mx-auto px-6 text-center">
          <p className="text-gray-400">
            Built for <span className="text-purple-400 font-semibold">Nosana Agents 102 Challenge</span> | 
            Powered by <span className="text-blue-400 font-semibold">Mastra AI</span>
          </p>
          <p className="text-gray-500 text-sm mt-2">
            © 2025 NeuroCoder AI. Decentralized AI Infrastructure.
          </p>
        </div>
      </footer>
    </div>
  );
}
